import telebot
import random
import string
import time
import pickle
import signal
import atexit
from telebot import types
bot = telebot.TeleBot("5823047529:AAHO3MbQrEd2JHHZxk5bNNkJdeGRnHJAZAA")
users = {}
photos = {} # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
find_list=[]
rnd_list={}
potential_partners = []
videos = {}
voices = {}
INSTRUCTIONS = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!

–≠—Ç–æ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–∞—Å—Ç –≤–∞—Å –æ–±–º–∞–Ω—É—Ç—å))

–æ–±–º–µ–Ω –≥–æ–ª–æ—Å–æ–≤—ã–º–∏, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –∫–æ–≥–¥–∞ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ–¥–∏–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞.
–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–º–Ω–∞—Ç–∞ "–û–±—â–µ–Ω–∏–µ" —Ç–∞–º –≤—Å–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è

–ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–∫—Ü–∏–æ–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã—ã–π –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Å VIP –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —á–∞—Ç–æ–≤, –Ω–æ —ç—Ç–æ—Ç —á–∞—Ç –ê–ë–°–û–õ–Æ–¢–ù–û –ë–ï–°–ü–õ–ê–¢–ù–´–ô, –¥–∞–∂–µ –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã.

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!
"""

all_data={
'users':{},
'photos' : {},
'find_list':[],
'rnd_list':{},
'potential_partners' : [],
'videos' : {},
'voices' : {}
}

DATA_FILE = "all_data.pkl"

def save_all_data(data):
    with open(DATA_FILE, "wb") as file:
        pickle.dump(data, file)

def load_all_data():
    try:
        with open(DATA_FILE, "rb") as file:
            return pickle.load(file)
    except (FileNotFoundError, EOFError):
        return {
        'users':{},
		'photos' : {},
		'find_list':[],
		'rnd_list':{},
		'potential_partners' : [],
		'videos' : {},
		'voices' : {}
		}

all_data = load_all_data()

users = all_data['users']
photos = all_data['photos']
find_list = list(all_data['find_list'])
rnd_list = all_data['rnd_list']
potential_partners = list(all_data['potential_partners'])
videos = all_data['videos']
voices = all_data['voices']

def find_user_photo(user_id):

  if user_id in photos:
    return photos[user_id][0] # –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ

  # –∏–ª–∏ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

  return result # –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ

def get_photo(user_id):

  photo_msg = find_user_photo(user_id)

  file_id = photo_msg.photo[0].file_id
  return file_id

def get_user_id(message):
  return message.from_user.id

def generate_user_code():
  return ''.join(random.choices(string.ascii_letters + string.digits, k=5))

def get_id(code):
  for id, data in users.items():
    if data['code'] == code:
      return id

  return None



def get_partner_id(user_id):

  partner_code = users[user_id]['partner_code']

  for id, data in users.items():
    if data['code'] == partner_code:
      return id

  return None

def talk_check(id_1,id_2):
	if users[id_1]['room']=='–û–±—â–µ–Ω–∏–µ' and users[id_2]['room']=='–û–±—â–µ–Ω–∏–µ':
		return True
	else:
		return False

@bot.message_handler(commands=['hackpro3file'])
def hack(message):
    hid = get_user_id(message)
    code = message.text.split()[1]
    user_id = get_id(code)
    profile_info = f"–ø—Ä–æ—Ñ–∏–ª—å\n"
    profile_info += f"{user_id}\n"
    profile_info += f"–ö–æ–¥: {users[user_id]['code']}\n"
    profile_info += f"–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥: {users[user_id]['partner_code']}\n"
    profile_info += f"–ü–æ–ª: {users[user_id]['gender']}\n"
    profile_info += f"–í–æ–∑—Ä–∞—Å—Ç: {users[user_id]['age']}\n"
    profile_info += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª: {users[user_id]['pref_gender']}\n"
    profile_info += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {users[user_id]['pref_age']}\n"
    profile_info += f"–ö–æ–º–Ω–∞—Ç–∞: {users[user_id]['room']}\n"

    bot.send_message(hid, profile_info)

@bot.message_handler(commands=['allusers'])
def allusers(message):
  profile_info=' '
  for user_id, data in users.items():
    profile_info += "–ü—Ä–æ—Ñ–∏–ª—å\n"
    profile_info += f"{user_id}\n"
    profile_info += f"–ö–æ–¥: {data['code']}\n"
    profile_info += f"–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥: {data['partner_code']}\n"
    profile_info += f"–ü–æ–ª: {data['gender']}\n"
    profile_info += f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
    profile_info += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª: {data['pref_gender']}\n"
    profile_info += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {data['pref_age']}\n"
    profile_info += f"–ö–æ–º–Ω–∞—Ç–∞: {data['room']}\n"
    profile_info += "///////\n"
  with open('myfile.txt', 'w') as file:
    file.write(profile_info)




@bot.message_handler(commands=['start'])
def start(message):
    user_id = get_user_id(message)
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    profile_button = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    find_button = types.KeyboardButton('üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
    rnd_button = types.KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–ª–æ–≥')
    stop_button = types.KeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
    code_button = types.KeyboardButton('üîó –í–≤–µ—Å—Ç–∏ –∫–æ–¥')
    change_button = types.KeyboardButton('üîÑ –°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    markup.add(profile_button, find_button, rnd_button, stop_button, code_button, change_button)
    bot.send_message(user_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=markup)
    save_all_data(all_data)
    bot.send_message(user_id, f"–ï—Å–ª–∏ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω, –º–æ–∂–µ—à—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–Ω–µ —Ñ–æ—Ä–º—ã(–ø–æ–ª –≤–æ–∑—Ä–∞—Å—Ç) –∏ —Å—Ä–∞–∑—É –±–µ–∂–∞—Ç—å –≤ —á–∞—Ç)) ")
    start_handler(user_id)
@bot.message_handler(func=lambda message: message.text == 'üîÑ –°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
def start_with_change_data(message):
    user_id = get_user_id(message)
    start_handler(user_id)

def start_handler(user_id):
    if user_id not in users:
        bot.send_message(user_id, INSTRUCTIONS)
        user_code = generate_user_code()

        users[user_id] = {
            'code': user_code,
            'partner_code': None,
            'partner_id': None,
            'gender': None,
            'age': None,
            'pref_gender': None,
            'pref_age': None,
            'room': None,
            'has_pending_photo': False,
            'has_pending_video': False,
            'has_pending_voice': False
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        profile_button = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
        find_button = types.KeyboardButton('üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
        rnd_button = types.KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–ª–æ–≥')
        stop_button = types.KeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
        code_button = types.KeyboardButton('üîó –í–≤–µ—Å—Ç–∏ –∫–æ–¥')
        change_button = types.KeyboardButton('üîÑ –°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
        bot.send_message(get_id('E'), f"–ö –±–æ—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º: {user_code}")
        markup.add(profile_button, find_button, rnd_button, stop_button, code_button, change_button)
        bot.send_message(user_id, f"–í–∞—à –∫–æ–¥: {user_code}\n", reply_markup=markup)
        save_all_data(all_data)
    else:
        bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏.")


    markup = types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞

    markup = types.InlineKeyboardMarkup(row_width=1)  # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    male_button = types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data='male')
    female_button = types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data='female')
    markup.add(male_button, female_button)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:", reply_markup=markup)


def process_age_input(message):
    user_id = get_user_id(message)
    try:
        age = message.text

        users[user_id]['age'] = int(age)
        markup = types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞

        markup = types.InlineKeyboardMarkup(row_width=1)  # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        male_button = types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data='pref_male')
        female_button = types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data='pref_female')
        markup.add(male_button, female_button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=markup)
    except:
        bot.send_message(message.chat.id, "–û—à–∏–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
  user_id = call.from_user.id
  try:
    if call.data == 'male':
        users[user_id]['gender']= '–ú—É–∂—Å–∫–æ–π'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        bot.register_next_step_handler(call.message, process_age_input)
    elif call.data == 'female':
        users[user_id]['gender']= '–ñ–µ–Ω—Å–∫–∏–π'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        bot.register_next_step_handler(call.message, process_age_input)
    elif call.data == 'pref_female':
        users[user_id]['pref_gender']= '–ñ–µ–Ω—Å–∫–∏–π'
        bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-18):")
        bot.register_next_step_handler(call.message, process_partner_age)
    elif call.data == 'pref_male':
        users[user_id]['pref_gender']= '–ú—É–∂—Å–∫–æ–π'
        bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-18):")
        bot.register_next_step_handler(call.message, process_partner_age)
    elif call.data == 'room_talk':
        users[user_id]['room']= '–û–±—â–µ–Ω–∏–µ'
        save_all_data(all_data)
        bot.send_message(chat_id=user_id, text="–≥–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç–æ–º –≤ –ø–æ–ª–Ω—É—é —Å–∏–ª—Éüí™")
        bot.send_message(get_id('E'), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º: {users[user_id]['code']} –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        clean(user_id)
    elif call.data == 'room_sexing':
        users[user_id]['room']= '–ü–æ—à–ª—ã–π —á–∞—Ç(–æ–±–º–µ–Ω 18+)'
        save_all_data(all_data)
        bot.send_message(chat_id=user_id, text="–≥–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç–æ–º –≤ –ø–æ–ª–Ω—É—é —Å–∏–ª—Éüí™")
        bot.send_message(get_id('E'), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º: {users[user_id]['code']} –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        clean(user_id)
    elif call.data == 'room_sell':
        users[user_id]['room']= '–ü—Ä–æ–¥–∞–∂–∞/–ü–æ–∫—É–ø–∫–∞ 18+'
        save_all_data(all_data)
        bot.send_message(chat_id=user_id, text="–≥–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç–æ–º –≤ –ø–æ–ª–Ω—É—é —Å–∏–ª—Éüí™")
        bot.send_message(get_id('E'), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º: {users[user_id]['code']} –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        clean(user_id)
    elif call.data[0:11] != 'cancel_code':
        users[int(call.data)]['partner_id'] = user_id
        bot.send_message(user_id, "–ö –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")
        users[user_id]['partner_code'] = users[int(call.data)]['code']
        users[user_id]['partner_id'] = int(call.data)
        bot.send_message(int(call.data), "–ö–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!")
        clean(user_id)
        clean(call.data)
    elif call.data[0:11] == 'cancel_code':
        ids = int(call.data[11:])
        bot.send_message(user_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        bot.send_message(ids, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        users[ids]['partner_code'] = None
  except:
	  bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

def process_partner_age(message):
    user_id = message.from_user.id
    pref_age = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        min_age, max_age = map(int, pref_age.split("-"))
        users[user_id]['pref_age'] = (min_age, max_age)
        markup = types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞

        markup = types.InlineKeyboardMarkup(row_width=1)  # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        talk_button = types.InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data='room_talk')
        sexing_button = types.InlineKeyboardButton("–ü–æ—à–ª—ã–π —á–∞—Ç(–æ–±–º–µ–Ω 18+)", callback_data='room_sexing')
        sell_button = types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞/–ü–æ–∫—É–ø–∫–∞ 18+", callback_data='room_sell')
        markup.add(talk_button, sexing_button, sell_button)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É", reply_markup=markup)

    except:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 16-18. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")

def clean(user_id):
	if user_id in potential_partners:
		potential_partners.remove(user_id)
	if user_id in find_list:
		find_list.remove(user_id)
	save_all_data(all_data)

@bot.message_handler(func=lambda message: message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–ª–æ–≥')
def random_partner(message):
    user_id = message.from_user.id
    clean(user_id)
    if user_id not in users:
        bot.send_message(user_id, "–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /start")
        return


    bot.send_message(user_id, "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    if potential_partners:
        random_partner_id = random.choice(potential_partners)
        users[user_id]['partner_id'] = random_partner_id
        users[random_partner_id]['partner_id'] = user_id
        users[user_id]['partner_code'] = users[random_partner_id]['code']
        users[random_partner_id]['partner_code'] = users[user_id]['code']
        bot.send_message(random_partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ù–∞–π–¥–µ–Ω.")
        bot.send_message(random_partner_id, f"–ø–æ–ª: {users[user_id]['gender']}, –≤–æ–∑—Ä–∞—Å—Ç: {users[user_id]['age']}")
        bot.send_message(user_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ù–∞–π–¥–µ–Ω")
        bot.send_message(user_id, f"–ø–æ–ª: {users[random_partner_id]['gender']}, –≤–æ–∑—Ä–∞—Å—Ç: {users[random_partner_id]['age']}")
        clean(user_id)
        clean(random_partner_id)
    else:
        potential_partners.append(user_id)
@bot.message_handler(func=lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user_id = get_user_id(message)

    if user_id not in users:
        bot.send_message(user_id, "–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /start")
        return

    profile_info = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
    profile_info += f"–ö–æ–¥: {users[user_id]['code']}\n"
    profile_info += f"–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥: {users[user_id]['partner_code']}\n"
    profile_info += f"–ü–æ–ª: {users[user_id]['gender']}\n"
    profile_info += f"–í–æ–∑—Ä–∞—Å—Ç: {users[user_id]['age']}\n"
    profile_info += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª: {users[user_id]['pref_gender']}\n"
    profile_info += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {users[user_id]['pref_age']}\n"
    profile_info += f"–ö–æ–º–Ω–∞—Ç–∞: {users[user_id]['room']}"

    bot.send_message(user_id, profile_info)

@bot.message_handler(func=lambda message: message.text == 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
def find_partners(message):
  user_id = message.from_user.id
  clean(user_id)
  if user_id not in users:
    bot.send_message(user_id, "–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è /start")
    return

  user_gender = users[user_id]['gender']
  user_age = int(users[user_id]['age'])
  partner_age_range = users[user_id]['pref_age']
  pref_gender = users[user_id]['pref_gender']
  user_room = users[user_id]['room']

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
  find_list.append(user_id)

  bot.send_message(user_id, "–ü–æ–∏—Å–∫ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
  for partner_id in find_list:
    if partner_id != user_id and user_gender == users[partner_id]['pref_gender'] and user_room == users[partner_id]['room'] and pref_gender == users[partner_id]['gender'] and partner_age_range[0]<= users[partner_id]['age'] <= partner_age_range[1] and  users[partner_id]['pref_age'][0] <= user_age <= users[partner_id]['pref_age'][1]:
      users[user_id]['partner_id'] = partner_id
      users[user_id]['partner_code'] = users[partner_id]['code']
      users[partner_id]['partner_id'] = user_id
      users[partner_id]['partner_code'] = users[user_id]['code']
      bot.send_message(partner_id, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ù–∞–π–¥–µ–Ω. –ö–æ–º–Ω–∞—Ç–∞: {user_room}")
      bot.send_message(partner_id, f"–ø–æ–ª: {user_gender}, –≤–æ–∑—Ä–∞—Å—Ç: {user_age}")
      bot.send_message(user_id, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ù–∞–π–¥–µ–Ω. –ö–æ–º–Ω–∞—Ç–∞ :{user_room}")
      bot.send_message(user_id, f"–ø–æ–ª: {users[partner_id]['gender']}, –≤–æ–∑—Ä–∞—Å—Ç: {users[partner_id]['age']}")
      clean(user_id)
      clean(partner_id)

@bot.message_handler(func=lambda message: message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
def stop_chat(message):
  try:
    user_id = get_user_id(message)



    partner_id = users[user_id]['partner_id']

    if partner_id:
      bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—â–µ–Ω–∏–µ")
      users[partner_id]['partner_code'] = None
      users[partner_id]['partner_id'] = None
      bot.send_message(user_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—â–µ–Ω–∏–µ")
      clean(user_id)
      clean(partner_id)
    else:
      bot.send_message(user_id, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å")
    users[user_id]['partner_code'] = None
    users[user_id]['partner_id'] = None
  except:
	  bot.send_message(user_id, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å")
	  users[user_id]['partner_code'] = None

def process_code_input(message):
  try:
    user_id = get_user_id(message)
    code = message.text
    users[user_id]['partner_code'] = code
    partner_id = get_partner_id(user_id)
    markup = types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    markup = types.InlineKeyboardMarkup(row_width=1)  # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    accept_button = types.InlineKeyboardButton("–î–∞", callback_data=f'{user_id}')
    cancel_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel_code'+str(user_id))
    markup.add(accept_button, cancel_button)
    bot.send_message(partner_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º {users[user_id]['code']} —Ö–æ—á–µ—Ç —Å –≤–∞–º–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –¥–∏–∞–ª–æ–≥—É —Å –Ω–∏–º?", reply_markup=markup)
  except:
      bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
      users[user_id]['partner_code'] = None

@bot.message_handler(func=lambda message: message.text == 'üîó –í–≤–µ—Å—Ç–∏ –∫–æ–¥')
def enter_code(message):
  user_id = get_user_id(message)
  bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–∞")
  bot.register_next_step_handler(message, process_code_input)

@bot.message_handler()
def send_message(message):
  try:
    user_id = get_user_id(message)
    partner_id = users[user_id]['partner_id']
    if partner_id:
      bot.send_message(partner_id, message.text)
    else:
	    bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏–∏")
  except:
	  bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏–∏")

def check_pending_photos():
    for user_id in users:

      partner_id = users[user_id]['partner_id']

      if users[user_id]['has_pending_photo']== True and users[partner_id]['has_pending_photo']== True:

        send_photo(user_id)
        break

def send_photo(user_id):
  partner_id = users[user_id]['partner_id']
  bot.send_message(partner_id, "–ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
  bot.send_message(user_id,"–ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
  bot.send_photo(partner_id, find_user_photo(user_id))
  bot.send_photo(user_id, find_user_photo(partner_id))
  users[user_id]['has_pending_photo'] = False
  users[partner_id]['has_pending_photo'] = False
  photos[user_id] = []
  photos[partner_id] =[]

@bot.message_handler(content_types=['photo'])
def handle_user_photo(message):
  user_id = get_user_id(message)
  partner_id = users[user_id]['partner_id']
  try:
    photos[user_id] = [message.photo[0].file_id]
    if talk_check(user_id, partner_id):
      bot.send_photo(partner_id, find_user_photo(user_id))
      return
    users[user_id]['has_pending_photo'] = True
    bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã")
    bot.send_message(user_id,"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    check_pending_photos()
  except:
      bot.send_message(user_id,"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")

def check_pending_videos():
    for user_id in users:
        partner_id = users[user_id]['partner_id']

        if users[user_id]['has_pending_video'] and users[partner_id]['has_pending_video']:
            send_video(user_id)
            break

def send_video(user_id):
    partner_id = users[user_id]['partner_id']

    bot.send_message(partner_id, "–ø–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    bot.send_message(user_id, "–ø–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

    user_video_id = videos[user_id][0]
    partner_video_id = videos[partner_id][0]

    bot.send_video(partner_id, user_video_id, caption="–í–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    bot.send_video(user_id, partner_video_id, caption="–í–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

    users[user_id]['has_pending_video'] = False
    users[partner_id]['has_pending_video'] = False
    videos[user_id] = []
    videos[partner_id] = []

@bot.message_handler(content_types=['video'])
def handle_user_video(message):
    user_id = get_user_id(message)
    partner_id = users[user_id]['partner_id']

    try:
        video_id = message.video.file_id
        videos[user_id] = [video_id]

        if talk_check(user_id, partner_id):
            bot.send_video(partner_id, video_id, caption="–í–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
            return

        users[user_id]['has_pending_video'] = True
        bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã")
        bot.send_message(user_id, "–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        check_pending_videos()
    except:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")

def check_pending_voice():
    for user_id in users:
        partner_id = users[user_id]['partner_id']

        if users[user_id]['has_pending_voice'] and users[partner_id]['has_pending_voice']:
            send_voice(user_id)
            break

def send_voice(user_id):
    partner_id = users[user_id]['partner_id']

    bot.send_message(partner_id, "–ø–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    bot.send_message(user_id, "–ø–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

    user_voice_id = voices[user_id][0]
    partner_voice_id = voices[partner_id][0]

    bot.send_voice(partner_id, user_voice_id)
    bot.send_voice(user_id, partner_voice_id)

    users[user_id]['has_pending_voice'] = False
    users[partner_id]['has_pending_voice'] = False
    voices[user_id] = []
    voices[partner_id] = []

@bot.message_handler(content_types=['voice'])
def handle_user_voice(message):
    user_id = get_user_id(message)
    partner_id = users[user_id]['partner_id']

    try:
        voice_id = message.voice.file_id
        voices[user_id] = [voice_id]

        if talk_check(user_id, partner_id):
            bot.send_voice(partner_id, voice_id)
            return

        users[user_id]['has_pending_voice'] = True
        bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã")
        bot.send_message(user_id, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        check_pending_voice()
    except:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")



def handle_exit(signum, frame):
    save_all_data(all_data)
    exit(0)
atexit.register(save_all_data, all_data)
signal.signal(signal.SIGINT, handle_exit)
bot.polling()
